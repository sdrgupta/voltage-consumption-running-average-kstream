buildscript {
    repositories {
        mavenCentral()
        maven {
            url = uri("https://packages.confluent.io/maven/")
        }
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://jitpack.io")
        }
    }
}

plugins {
    id "java"
    id "idea"
    id "com.github.imflog.kafka-schema-registry-gradle-plugin" version "1.6.0"
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}

group 'com.onlyagricare'
version '1.0.0'

repositories {
    mavenCentral()

    maven {
        url "https://packages.confluent.io/maven"
    }

    maven {
        url = uri("https://jitpack.io")
    }
}

rootProject.tasks.named("processResources") {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {
    implementation "io.confluent:kafka-avro-serializer:7.1.1"
    implementation 'org.apache.avro:avro:1.11.0'
    implementation('io.confluent:kafka-streams-avro-serde:6.1.1')
    implementation 'org.apache.kafka:kafka-streams:3.1.0'
    implementation 'org.apache.kafka:kafka-clients:3.2.1'

    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.18.0'

    testImplementation 'org.apache.kafka:kafka-streams-test-utils:3.1.0'
    testImplementation "junit:junit:4.13.2"
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

schemaRegistry {
    def props = new Properties()
    file("src/main/resources/application.properties").withInputStream { props.load(it) }
    def srUrl = props.getProperty("schema.registry.url")
    def fullAuth = props.getProperty("basic.auth.user.info")
    if (srUrl != null && fullAuth != null) {
        // println "Using Schema Registry endpoint:${srUrl}, username:${auth[0]},password:${auth[1]}"
        def auth = fullAuth.split(":")
        url = srUrl

        credentials {
            // username is the characters up to the ':' in the basic.auth.user.info property
            username = auth[0]
            // password is everything after ':' in the basic.auth.user.info property
            password = auth[1]
        }
    } else {
        println("Expected to find the [schema.registry.url] and [basic.auth.user.info]")
    }

    register {
        subject('avro.power.consumption.measures-value', 'src/main/avro/power_consumption_measures.avsc', 'AVRO')
        subject('avro.voltage.metrics-value', 'src/main/avro/voltage_metrics.avsc', 'AVRO')
    }

    download {
        subject('avro.power.consumption.measures-value', 'src/main/avro', 'powerConsumptionMesagures')
        subject('avro.voltage.metrics-value', 'src/main/avro', 'voltage_metrics')
    }

    compatibility {
        subject('avro.power.consumption.measures-value', 'src/main/avro/power_consumption_measures.avsc', 'AVRO')
        subject('avro.voltage.metrics-value', 'src/main/avro/voltage_metrics.avsc', 'AVRO')
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
//                "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(" "),
                "Main-Class": "com.onlyagricare.Main"
        )
    }
    from {
        sourceSets.main.output
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
